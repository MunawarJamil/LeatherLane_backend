name: CD - Deploy to EC2

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write  # only needed if you use OIDC; not required for SSH approach

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_REPOSITORY }}  # e.g. username/repo
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Upload image tag for next job
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: |
            image-tag.txt
        # We create file:
      - name: Save tag
        run: echo "${{ env.IMAGE_TAG }}" > image-tag.txt

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Download image tag
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          path: .

      - name: Install ssh-client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 - pull latest & restart
        env:
          IMAGE: ${{ secrets.DOCKERHUB_REPOSITORY }}
          TAG: $(cat image-tag.txt)
        run: |
          ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_ed25519 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'SSH_CMDS'
            cd /home/${SSH_USER}/app || cd /home/${SSH_USER}  # adjust to your path
            # make sure docker & docker-compose are installed on server
            docker pull $IMAGE:latest || true
            docker pull $IMAGE:$TAG || true
            # if you have docker compose file in repo on server, run:
            docker compose pull
            docker compose up -d --build
            # Or if you run container via docker run:
            # docker stop myapp || true
            # docker rm myapp || true
            # docker run -d --name myapp -p 7000:7000 $IMAGE:$TAG
            exit 
          SSH_CMDS
  